---
interface Props {
	title: string;
	subtitle: string;
	price: string;
	duration: string;
	description: string;
	features: string[];
	conditions?: string[];
	benefits?: string[];
	calendlyLink: string;
	modalId: string;
}

const {
	title,
	subtitle,
	price,
	duration,
	description,
	features,
	conditions = [],
	benefits = [],
	calendlyLink,
	modalId,
} = Astro.props;
---

<div class="modal" id={modalId} aria-hidden="true">
	<div class="modal-overlay" data-close></div>
	<div
		class="modal-container"
		role="dialog"
		aria-labelledby={`${modalId}-title`}
	>
		<div class="modal-header">
			<h2 id={`${modalId}-title`}>{title}</h2>
			<button class="close-button" data-close aria-label="Fermer">×</button>
		</div>

		<div class="modal-content">
			<div class="service-details">
				<div class="meta">
					<p class="duration">{duration}</p>
					<p class="price">{price}</p>
				</div>

				<div class="description">
					<p>{description}</p>
				</div>

				<div class="features-grid">
					<div class="features">
						<h3>Ce pack inclut :</h3>
						<ul>
							{features.map((feature) => <li>{feature}</li>)}
						</ul>
					</div>

					{
						benefits.length > 0 && (
							<div class="benefits">
								<h3>Ce que vous allez vivre :</h3>
								<ul>
									{benefits.map((benefit) => (
										<li>{benefit}</li>
									))}
								</ul>
							</div>
						)
					}
				</div>

				{
					conditions.length > 0 && (
						<div class="conditions">
							<h3>Conditions :</h3>
							<ul>
								{conditions.map((condition) => (
									<li>{condition}</li>
								))}
							</ul>
						</div>
					)
				}
			</div>

			<div class="modal-actions">
				<a href={calendlyLink} target="_blank" class="cta-btn"
					>Réserver maintenant</a
				>
			</div>
		</div>
	</div>
</div>

<script>
	// Find all modals on the page
	const modals = document.querySelectorAll<HTMLElement>(".modal");

	// Add click handlers to all elements with data-modal attribute
	document.querySelectorAll<HTMLElement>("[data-modal]").forEach((trigger) => {
		trigger.addEventListener("click", (e) => {
			e.preventDefault();
			const modalId = trigger.getAttribute("data-modal");
			if (modalId) {
				const modal = document.getElementById(modalId);
				if (modal) {
					modal.classList.add("active");
					document.body.style.overflow = "hidden";
				}
			}
		});
	});

	// Add close handlers
	modals.forEach((modal) => {
		modal.querySelectorAll<HTMLElement>("[data-close]").forEach((closeBtn) => {
			closeBtn.addEventListener("click", () => {
				modal.classList.remove("active");
				document.body.style.overflow = "";
			});
		});

		// Close on escape key
		document.addEventListener("keydown", (e) => {
			if (e.key === "Escape" && modal.classList.contains("active")) {
				modal.classList.remove("active");
				document.body.style.overflow = "";
			}
		});
	});
</script>

<style lang="scss">
	.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 1000;

		&.active {
			display: block;
		}
	}

	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(5px);
	}

	.modal-container {
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		background: $bg-light;
		border-radius: $border-radius-lg;
		width: 90%;
		max-width: 800px;
		max-height: 800px;
		display: flex;
		flex-direction: column;
		box-shadow: $shadow-xl;
	}

	.modal-header {
		padding: 20px 25px;
		border-bottom: 1px solid $border-color;
		display: flex;
		justify-content: space-between;
		align-items: center;
		flex-shrink: 0;

		h2 {
			margin: 0;
			color: $primary-color;
			font-size: 1.8em;
		}

		.close-button {
			background: none;
			border: none;
			font-size: 2em;
			cursor: pointer;
			color: $text-light;
			padding: 5px;

			&:hover {
				color: $text-color;
			}
		}
	}

	.modal-content {
		padding-inline: 25px;
		flex: 1;
		overflow-y: auto;

		.service-details {
			display: flex;
			flex-direction: column;
			gap: 25px;

			.meta {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 30px 0;
				border-bottom: 1px solid $border-color;

				.duration,
				.price {
					font-size: 1.2em;
					font-weight: bold;
					color: $secondary-color;
				}
			}

			.description {
				font-size: 1.1em;
				line-height: 1.6;
				color: $text-color;
                text-align: justify;
                padding-block: 10px;
			}

			.features-grid {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 30px;
			}

			.features,
			.benefits,
			.conditions {
				h3 {
					color: $primary-color;
					margin-bottom: 15px;
					font-size: 1.2em;
				}

				ul {
					list-style: none;
					padding: 0;
					display: flex;
					flex-direction: column;
					gap: 12px;

					li {
						padding-left: 25px;
						position: relative;
						line-height: 1.4;

						&:before {
							content: "✓";
							color: $secondary-color;
							position: absolute;
							left: 0;
						}
					}
				}
			}

			.conditions {
				border-top: 1px solid $border-color;
				padding-top: 20px;
                margin-bottom: 20px;
			}
            .features-grid {
                margin-bottom: 20px;
            }
		}
	}

	.modal-actions {
		padding: 20px 25px;
		border-top: 1px solid $border-color;
		text-align: center;
		flex-shrink: 0;

		.cta-btn {
			display: inline-block;
			padding: 15px 40px;
			background-color: $secondary-color;
			color: white;
			text-decoration: none;
			border-radius: $border-radius-md;
			font-size: 1.1em;
			transition: all 0.3s ease;

			&:hover {
				background-color: $hover-color;
				transform: scale(1.05);
			}
		}
	}

	@media (max-width: $mobile) {
		.modal-container {
			width: 95%;
			height: 95vh;
			max-height: none;
		}

		.modal-content {
			.service-details {
				.features-grid {
					grid-template-columns: 1fr;
					gap: 20px;
				}
			}
		}
	}
</style>
