---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import { render } from "astro:content";

// R√©cup√©rer tous les √©v√©nements et les trier par date
const events = await getCollection("events");
const sortedEvents = events.sort(
	(a, b) => new Date(a.data.date).getTime() - new Date(b.data.date).getTime()
);

// Formatage de la date
const formatDate = (date: Date) => {
	return new Date(date).toLocaleDateString("fr-FR", {
		year: "numeric",
		month: "long",
		day: "numeric",
		hour: "2-digit",
		minute: "2-digit",
	});
};

const {
	title = "√âv√©nements PNL",
	description = "D√©couvrez nos √©v√©nements de Programmation Neuro-Linguistique",
} = Astro.props;
---

<div class="events-container">
	<div class="events-header">
		<h1>√âv√©nements PNL</h1>
		<p class="events-intro">
			D√©couvrez nos √©v√©nements d√©di√©s √† la Programmation Neuro-Linguistique. Des
			ateliers, conf√©rences et retraites pour explorer et approfondir vos
			connaissances en PNL.
		</p>
	</div>

	<div class="events-filter">
		<h2>Prochains √©v√©nements</h2>
		<div class="filter-options">
			<button class="filter-btn active" data-filter="all">Tous</button>
			<button class="filter-btn" data-filter="atelier">Ateliers</button>
			<button class="filter-btn" data-filter="conference">Conf√©rences</button>
			<button class="filter-btn" data-filter="retraite">Retraites</button>
		</div>
	</div>

	<div class="events-grid">
		{
			sortedEvents.map(async (event) => {
				// R√©cup√©rer le contenu Markdown (description)
				const { Content } = await render(event);
				// Convertir le contenu en texte brut pour l'aper√ßu
				const contentText = event.body;
				const previewText =
					contentText.length > 200
						? `${contentText.substring(0, 200)}...`
						: contentText;

				return (
					<div class="event-card">
						<div class="event-image">
							{event.data.image && (
								<Image
									src={event.data.image}
									alt={event.data.title}
									width={500}
									height={300}
									class="card-img"
								/>
							)}
						</div>
						<div class="event-header">
							<h3>{event.data.title}</h3>
							<span class="event-price">{event.data.prix}</span>
						</div>

						<div class="event-details">
							<div class="event-info">
								<div class="event-date">
									<span class="icon">üìÖ</span>
									<time datetime={event.data.date.toISOString()}>
										{formatDate(event.data.date)}
									</time>
								</div>

								<div class="event-location">
									<span class="icon">üìç</span>
									<span>{event.data.lieu}</span>
								</div>

								<div class="event-group-size">
									<span class="icon">üë•</span>
									<span>{event.data.tailleGroupe} participants max</span>
								</div>
							</div>

							<p class="event-description">{previewText}</p>

							<div class="event-actions">
								<a href={`/events/${event.slug}`} class="btn-details">
									Voir les d√©tails
								</a>
								<button class="btn-register">S'inscrire</button>
							</div>
						</div>
					</div>
				);
			})
		}
	</div>
</div>

<script>
	// Filtrage des √©v√©nements
	document.addEventListener("DOMContentLoaded", () => {
		const filterButtons = document.querySelectorAll(".filter-btn");

		filterButtons.forEach((button) => {
			button.addEventListener("click", () => {
				// Retirer la classe active de tous les boutons
				filterButtons.forEach((btn) => btn.classList.remove("active"));

				// Ajouter la classe active au bouton cliqu√©
				button.classList.add("active");

				// Logique de filtrage √† impl√©menter
				const filterValue = button.getAttribute("data-filter");
				console.log(`Filtrer par: ${filterValue}`);

				// Ici, vous pourriez ajouter une logique pour filtrer les √©v√©nements
				// bas√©e sur des cat√©gories que vous ajouteriez √† vos √©v√©nements
			});
		});
	});
</script>

<style lang="scss">
	.events-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: $spacing-xl $spacing-md;
	}

	.events-header {
		text-align: center;
		margin-bottom: $spacing-xl;

		h1 {
			font-size: 2.5rem;
			color: $text-color;
			margin-bottom: $spacing-md;
		}

		.events-intro {
			max-width: 800px;
			margin: 0 auto;
			color: $text-light;
			font-size: 1.1rem;
			line-height: 1.6;
		}
	}

	.events-filter {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: $spacing-lg;
		flex-wrap: wrap;

		h2 {
			font-size: 1.8rem;
			color: $text-color;
			margin-bottom: $spacing-sm;
		}

		.filter-options {
			display: flex;
			gap: $spacing-sm;
			flex-wrap: wrap;

			.filter-btn {
				padding: $spacing-sm $spacing-md;
				background-color: $bg-color;
				border: 1px solid $border-color;
				border-radius: $border-radius-md;
				color: $text-color;
				cursor: pointer;
				transition: all $transition-speed $transition-timing;

				&:hover {
					background-color: $bg-hover;
				}

				&.active {
					background-color: $primary-color;
					color: $text-white;
					border-color: $primary-color;
				}
			}
		}
	}

	.events-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: $spacing-lg;

		.event-card {
			background-color: $bg-color;
			border-radius: $border-radius-lg;
			overflow: hidden;
			box-shadow: $shadow-sm;
			transition:
				transform $transition-speed $transition-timing,
				box-shadow $transition-speed $transition-timing;
			display: grid;
			grid-template-rows: 200px auto auto 1fr auto;

			&:hover {
				transform: translateY(-5px);
				box-shadow: $shadow-md;
			}

			.event-image {
				width: 100%;
				height: 200px;
				overflow: hidden;
				grid-row: 1;

				.card-img {
					width: 100%;
					height: 100%;
					object-fit: cover;
					transition: transform 0.3s ease;
				}

				&:hover .card-img {
					transform: scale(1.05);
				}
			}

			.event-header {
				padding: $spacing-md;
				background-color: $primary-color;
				color: $text-white;
				display: flex;
				justify-content: space-between;
				align-items: center;
				grid-row: 2;

				h3 {
					font-size: 1.3rem;
					margin: 0;
					flex: 1;
					color: $text-white;
				}

				.event-price {
					font-weight: bold;
					font-size: 1.2rem;
					background-color: rgba(255, 255, 255, 0.2);
					padding: $spacing-xs $spacing-sm;
					border-radius: $border-radius-sm;
					color: $secondary-color;
				}
			}

			.event-details {
				padding: $spacing-md;
				display: grid;
				grid-template-rows: auto 1fr auto;
				gap: $spacing-md;
				height: 100%;

				.event-info {
					grid-row: 1;
					display: grid;
					gap: $spacing-xs;

					.event-date,
					.event-location,
					.event-group-size {
						display: flex;
						align-items: center;
						color: $text-light;

						.icon {
							margin-right: $spacing-sm;
							font-size: 1.1rem;
							min-width: 1.5rem;
							text-align: center;
						}
					}
				}

				.event-description {
					color: $text-color;
					line-height: 1.6;
					grid-row: 2;
					min-height: 100px;
					overflow: hidden;
				}

				.event-actions {
					display: flex;
					gap: $spacing-sm;
					grid-row: 3;
					margin-top: auto;

					.btn-details,
					.btn-register {
						padding: $spacing-sm $spacing-md;
						border-radius: $border-radius-md;
						text-decoration: none;
						text-align: center;
						font-weight: 500;
						transition: background-color $transition-speed $transition-timing;
						flex: 1;
					}

					.btn-details {
						background-color: $bg-hover;
						color: $text-color;

						&:hover {
							background-color: darken($bg-hover, 5%);
						}
					}

					.btn-register {
						background-color: $primary-color;
						color: $text-white;
						border: none;
						cursor: pointer;

						&:hover {
							background-color: darken($primary-color, 10%);
						}
					}
				}
			}
		}
	}

	@media (max-width: $tablet) {
		.events-container {
			padding: $spacing-lg $spacing-sm;
		}

		.events-filter {
			flex-direction: column;
			align-items: flex-start;

			h2 {
				margin-bottom: $spacing-md;
			}

			.filter-options {
				width: 100%;
				overflow-x: auto;
				padding-bottom: $spacing-sm;

				.filter-btn {
					white-space: nowrap;
				}
			}
		}

		.events-grid {
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		}
	}

	@media (max-width: $mobile) {
		.events-header {
			h1 {
				font-size: 2rem;
			}

			.events-intro {
				font-size: 1rem;
			}
		}

		.events-grid {
			grid-template-columns: 1fr;

			.event-card {
				.event-header {
					flex-direction: column;
					align-items: flex-start;

					h3 {
						margin-bottom: $spacing-xs;
					}
				}

				.event-details {
					.event-actions {
						flex-direction: column;
					}
				}
			}
		}
	}
</style>
